use crate::layers::Stackable;
use crate::tensor::shape::ToShape;
use std::collections::{HashMap, HashSet};

pub fn torch_var<S>(name: &str, shape: S) -> String
where
    S: ToShape,
{
    let shape = shape.to_shape(0);
    format!("{} = torch.randn(({})).cuda()\n", name, shape.to_string2())
}

pub struct Profiler {
    comp_time: HashMap<String, usize>,
    benchmark: HashMap<String, (String, String)>,
}

impl Profiler {
    pub fn new() -> Self {
        Profiler {
            comp_time: HashMap::new(),
            benchmark: HashMap::new(),
        }
    }

    pub fn add_benchmark(&mut self, uid: &str, prep_code: String, exec_code: String) {
        self.benchmark
            .insert(uid.to_string(), (prep_code, exec_code));
    }

    pub fn comp_time(&self, uid: &str) -> Option<usize> {
        self.comp_time.get(uid).cloned()
    }

    pub fn gen_benchmark(&self, repeat: usize) -> String {
        // step 1. profiler code

        let mut prep = String::new();
        let mut exec = String::new();

        let indent = "    ";

        prep.push_str("import timeit\n");
        prep.push_str("import torch\n");

        exec.push_str("benchmark = {}\n");
        exec.push_str(&format!("for i in range({}):\n", repeat));

        for (uid, (prep_code, exec_code)) in self.benchmark.iter() {
            prep.push_str(prep_code);
            prep.push_str("\n");

            // timeit.timeit(lambda: {exec_code}, number=1)
            exec.push_str(indent);
            exec.push_str(&format!(
                "t = timeit.timeit(lambda: {}, number=1)\n",
                exec_code
            ));
            exec.push_str(indent);
            exec.push_str(&format!("benchmark.setdefault('{}', 0) \n", uid));
            exec.push_str(indent);
            exec.push_str(&format!("benchmark['{}'] += t\n", uid));
        }

        exec.push_str("rust_code = '['\n");
        exec.push_str("for uid in benchmark:\n");
        exec.push_str(indent);
        exec.push_str(&format!(
            "rust_code += '(\"' + uid + '\", ' + str(benchmark[uid] / {}) + '), '\n",
            repeat
        ));
        exec.push_str("rust_code += ']'\n");
        exec.push_str("print(rust_code)\n");

        prep.push('\n');
        prep.push_str(&exec);

        prep
    }
}

pub fn test_profile() -> Profiler {
    let a = [
        ("sumto_4096_768_", 7.446500001151435e-05),
        ("matmul_grad1_1_12_512_512_", 0.0001068404999955419),
        ("matmul_768_768_", 4.719099996464138e-05),
        ("matmul_1_12_512_512_", 3.271450003694554e-05),
        ("maps_512_768_", 2.6892000050793285e-05),
        ("maps_2_512_3072_", 1.3493499977812462e-05),
        ("sum_2048_768_", 3.421349998689038e-05),
        ("matmul_grad1_2_512_3072_1_", 4.692200002409663e-05),
        ("maps_2_12_512_512_", 4.8092999975324346e-05),
        ("matmul_grad2_3072_768_", 6.79824999565426e-05),
        ("sumto_2048_768_", 2.54639999752726e-05),
        ("matmul_grad1_8_2_1_", 3.659800006516889e-05),
        ("matmul_grad2_768_768_", 4.462699996565789e-05),
        ("matmul_grad1_1_512_3072_1_", 4.283500004476082e-05),
        ("sum_16_12_512_512_", 2.531600000565959e-05),
        ("maps_2048_1_", 2.1116999960213434e-05),
        ("matmul_2_768_", 3.847049998739749e-05),
        ("matmul_grad1_2_12_512_512_", 6.745700000010402e-05),
        ("sumto_1024_768_", 2.181450003035934e-05),
        ("maps_4_512_3072_", 2.1376500001224485e-05),
        ("maps_16_12_512_512_", 2.0096500009003648e-05),
        ("maps_1_12_512_512_", 1.4391999968665914e-05),
        ("maps_8_1_1_512_", 1.398749992631565e-05),
        ("maps_2048_768_", 1.4376500075741205e-05),
        ("maps_8_12_512_512_", 1.4391499973953614e-05),
        ("sumto_8_512_768_", 2.090449999059274e-05),
        ("sum_1024_768_", 1.6225500019118044e-05),
        ("matmul_grad2_2_768_", 4.074749995197635e-05),
        ("matmul_grad2_1_12_512_512_", 6.428699992966358e-05),
        ("sumto_1_2_", 2.1864000018467777e-05),
        ("sumto_1_512_768_", 1.6951000077369827e-05),
        ("matmul_4_12_512_64_", 2.67634999886468e-05),
        ("maps_8_512_3072_", 1.7444000036448415e-05),
        ("matmul_grad1_4_12_512_512_", 6.358749999435531e-05),
        ("matmul_grad1_4_512_3072_1_", 3.7276000000474596e-05),
        ("matmul_grad2_2_12_512_512_", 5.775049999101611e-05),
        ("sumto_8_2_", 2.161200001182806e-05),
        ("maps_16_2_", 1.901249999036736e-05),
        ("maps_2_1_1_512_", 1.3895499989757809e-05),
        ("sumto_2_512_3072_", 1.748200003248712e-05),
        ("sumto_4_2_", 1.5916999984710856e-05),
        ("maps_1_1_1_512_", 1.647000004822985e-05),
        ("matmul_4_12_512_512_", 3.707650000706053e-05),
        ("matmul_8_12_512_512_", 2.304550002918404e-05),
        ("maps_16_512_3072_", 1.8116999967787706e-05),
        ("matmul_grad2_16_12_512_512_", 6.334049999168201e-05),
        ("matmul_grad1_16_512_3072_1_", 4.310750000513508e-05),
        ("sumto_16_512_3072_", 2.2391000015886675e-05),
        ("matmul_grad1_2_512_768_1_", 3.943450002452664e-05),
        ("matmul_grad1_8_12_512_512_", 4.8754000033568445e-05),
        ("maps_8192_1_", 2.080000007254057e-05),
        ("sumto_512_768_", 2.0625999979984044e-05),
        ("matmul_8_12_512_64_", 2.6919999982055742e-05),
        ("sumto_8192_768_", 1.813150004181807e-05),
        ("matmul_grad1_8_12_512_64_", 5.394700002625541e-05),
        ("maps_512_1_", 2.3557000019991392e-05),
        ("maps_30522_768_", 1.7774000014014746e-05),
        ("sumto_16_2_", 2.0691000031547446e-05),
        ("matmul_grad1_16_12_512_512_", 5.480400000124064e-05),
        ("matmul_grad1_1_512_768_1_", 4.186249998383573e-05),
        ("maps_2_512_768_", 1.813549999951647e-05),
        ("maps_4_512_768_", 1.3195000008181523e-05),
        ("maps_4_2_", 1.973000001953551e-05),
        ("sumto_4_512_768_", 2.1614999980101857e-05),
        ("sumto_1_512_3072_", 1.6703999961009686e-05),
        ("maps_4096_768_", 1.417949999904522e-05),
        ("sumto_8_512_3072_", 1.6942999991442775e-05),
        ("matmul_grad1_16_512_768_1_", 4.2109500043352455e-05),
        ("maps_2_2_", 2.3476500018659863e-05),
        ("matmul_grad1_2_12_512_64_", 5.415050003421129e-05),
        ("sum_1_12_512_512_", 2.2377999982836627e-05),
        ("matmul_2_12_512_64_", 2.6573500008453266e-05),
        ("matmul_grad1_4_2_1_", 3.326750004362111e-05),
        ("matmul_grad2_1_12_512_64_", 4.9463499976809544e-05),
        ("sumto_16_512_768_", 2.5528999969992583e-05),
        ("maps_1_512_3072_", 1.7354999954477535e-05),
        ("sumto_2_512_768_", 1.9886500012944452e-05),
        ("matmul_16_12_512_512_", 3.055749999703039e-05),
        ("matmul_768_3072_", 4.275750001170309e-05),
        ("matmul_grad2_8_12_512_512_", 6.552699994699651e-05),
        ("matmul_3072_768_", 3.3150500030387775e-05),
        ("sumto_4_512_3072_", 2.2896000018590712e-05),
        ("maps_16_1_1_512_", 1.9701999974586215e-05),
        ("maps_1_512_768_", 1.6977499967651966e-05),
        ("matmul_grad2_16_12_512_64_", 6.644749998940824e-05),
        ("matmul_grad2_4_12_512_512_", 5.434400003423434e-05),
        ("sum_512_768_", 2.3450500009403186e-05),
        ("matmul_grad2_8_12_512_64_", 5.939849995684199e-05),
        ("matmul_2_12_512_512_", 3.257449998272932e-05),
        ("sum_8_12_512_512_", 3.0082500074968266e-05),
        ("matmul_16_12_512_64_", 2.5272000016229867e-05),
        ("matmul_grad1_1_12_512_64_", 5.178150001938775e-05),
        ("sum_8192_768_", 2.109999996946499e-05),
        ("matmul_grad1_4_512_768_1_", 3.728199999386561e-05),
        ("maps_8_512_768_", 1.8695000051138777e-05),
        ("maps_4_1_1_512_", 1.9761999908496364e-05),
        ("sum_4_12_512_512_", 2.216850003833315e-05),
        ("matmul_grad2_4_12_512_64_", 6.56259999800568e-05),
        ("matmul_grad1_16_12_512_64_", 5.180199997312229e-05),
        ("matmul_grad1_8_512_768_1_", 3.300800000261006e-05),
        ("matmul_grad1_16_2_1_", 3.0127499996979168e-05),
        ("maps_1_2_", 2.2234500022477732e-05),
        ("maps_1024_1_", 1.442900003212344e-05),
        ("matmul_grad1_8_512_3072_1_", 3.84365000059006e-05),
        ("matmul_grad2_768_3072_", 4.673549995004578e-05),
        ("maps_8192_768_", 1.993250003806679e-05),
        ("sum_4096_768_", 2.296899998555091e-05),
        ("sum_2_12_512_512_", 1.7500500007372466e-05),
        ("maps_4096_1_", 1.7399999990175274e-05),
        ("maps_16_512_768_", 2.1168499984014488e-05),
        ("sumto_2_2_", 1.887600001282408e-05),
        ("maps_1024_768_", 1.3959000000340893e-05),
        ("maps_4_12_512_512_", 1.7726000010043208e-05),
        ("maps_8_2_", 1.4239500046642206e-05),
        ("matmul_grad1_4_12_512_64_", 6.304150002733877e-05),
        ("matmul_grad1_2_2_1_", 3.2320499997240404e-05),
        ("matmul_1_12_512_64_", 2.8430499980913737e-05),
        ("matmul_grad1_1_2_1_", 2.8855500033841963e-05),
        ("matmul_grad2_2_12_512_64_", 5.972299999257302e-05),
    ];

    let comp_time: HashMap<String, usize> = a
        .iter()
        .map(|(a, b)| (a.to_string(), (b * 10000000_f64) as usize))
        .collect();

    Profiler{
        comp_time,
        benchmark: HashMap::new()
    }
}
