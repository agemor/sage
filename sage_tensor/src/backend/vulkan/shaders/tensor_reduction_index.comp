#version 450

#define LOCAL_SIZE 1
#define MAX_DIM 8

layout(local_size_x = 1) in;

layout(set = 0, binding = 0) writeonly buffer BufferOutput {
    uint data[];
} buffer_out;

layout(set = 0, binding = 1) readonly buffer BufferInput {
    float data[];
} buffer_in;

layout(push_constant) uniform PushConstants {
// Buffer offsets
    uint offset_out;
    uint offset_in;

// Number of dimensions
    uint ndim_pre;

    uint size_red;

    uint stride_pre[MAX_DIM];
    uint stride_pre_ref[MAX_DIM];

    uint stride_red;
    uint stride_red_ref;
};


uint translate(uint index, uint len, uint stride[MAX_DIM], uint output_stride[MAX_DIM]) {
    uint output_index = 0;
    uint rem = index;
    for (uint i = 0; i < len; ++i) {
        uint c = rem / stride[i];
        rem -= c * stride[i];
        output_index += c * output_stride[i];
    }
    return output_index;
}

bool reduce_index(float x1, float x2) {
    bool y = false;
    #ifdef MAX
    y = x1 > x2;
    #endif
    #ifdef MUL
    y = x1 < x2;
    #endif
    return y;
}

void main() {

    uint index_out = offset_out + gl_WorkGroupID.x;
    uint index_in_base = offset_in + translate(gl_WorkGroupID.x, ndim_pre, stride_pre, stride_pre_ref);

    uint offset_inv = gl_LocalInvocationID.x * size_red;

    float y = buffer_in.data[index_in_base + offset_inv * stride_red_ref];
    uint best_i = 0;

    for (uint i = 1; i < size_red; ++i) {
        uint index_inv = offset_inv + i;
        uint index_in = index_in_base + index_inv * stride_red_ref;

        float x = buffer_in.data[index_in];

        if (reduce_index(x, y)) {
            best_i = i;
            y = x;
        }
    }

    buffer_out.data[index_out] = best_i;
}